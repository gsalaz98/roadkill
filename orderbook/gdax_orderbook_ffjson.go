// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: gdax_orderbook.go

package orderbook

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *FastGDAXOrderbook) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *FastGDAXOrderbook) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Type":`)
	fflib.WriteJsonString(buf, string(j.Type))
	buf.WriteString(`,"Time":`)
	fflib.WriteJsonString(buf, string(j.Time))
	buf.WriteString(`,"ProductID":`)
	fflib.WriteJsonString(buf, string(j.ProductID))
	buf.WriteString(`,"Sequence":`)
	fflib.FormatBits2(buf, uint64(j.Sequence), 10, false)
	buf.WriteString(`,"OrderID":`)
	fflib.WriteJsonString(buf, string(j.OrderID))
	buf.WriteString(`,"Price":`)
	fflib.WriteJsonString(buf, string(j.Price))
	buf.WriteString(`,"Side":`)
	fflib.WriteJsonString(buf, string(j.Side))
	buf.WriteString(`,"OrderType":`)
	fflib.WriteJsonString(buf, string(j.OrderType))
	buf.WriteString(`,"Funds":`)
	fflib.WriteJsonString(buf, string(j.Funds))
	buf.WriteString(`,"RemainingSize":`)
	fflib.WriteJsonString(buf, string(j.RemainingSize))
	buf.WriteString(`,"Reason":`)
	fflib.WriteJsonString(buf, string(j.Reason))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtFastGDAXOrderbookbase = iota
	ffjtFastGDAXOrderbooknosuchkey

	ffjtFastGDAXOrderbookType

	ffjtFastGDAXOrderbookTime

	ffjtFastGDAXOrderbookProductID

	ffjtFastGDAXOrderbookSequence

	ffjtFastGDAXOrderbookOrderID

	ffjtFastGDAXOrderbookPrice

	ffjtFastGDAXOrderbookSide

	ffjtFastGDAXOrderbookOrderType

	ffjtFastGDAXOrderbookFunds

	ffjtFastGDAXOrderbookRemainingSize

	ffjtFastGDAXOrderbookReason
)

var ffjKeyFastGDAXOrderbookType = []byte("Type")

var ffjKeyFastGDAXOrderbookTime = []byte("Time")

var ffjKeyFastGDAXOrderbookProductID = []byte("ProductID")

var ffjKeyFastGDAXOrderbookSequence = []byte("Sequence")

var ffjKeyFastGDAXOrderbookOrderID = []byte("OrderID")

var ffjKeyFastGDAXOrderbookPrice = []byte("Price")

var ffjKeyFastGDAXOrderbookSide = []byte("Side")

var ffjKeyFastGDAXOrderbookOrderType = []byte("OrderType")

var ffjKeyFastGDAXOrderbookFunds = []byte("Funds")

var ffjKeyFastGDAXOrderbookRemainingSize = []byte("RemainingSize")

var ffjKeyFastGDAXOrderbookReason = []byte("Reason")

// UnmarshalJSON umarshall json - template of ffjson
func (j *FastGDAXOrderbook) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *FastGDAXOrderbook) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtFastGDAXOrderbookbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtFastGDAXOrderbooknosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'F':

					if bytes.Equal(ffjKeyFastGDAXOrderbookFunds, kn) {
						currentKey = ffjtFastGDAXOrderbookFunds
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'O':

					if bytes.Equal(ffjKeyFastGDAXOrderbookOrderID, kn) {
						currentKey = ffjtFastGDAXOrderbookOrderID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyFastGDAXOrderbookOrderType, kn) {
						currentKey = ffjtFastGDAXOrderbookOrderType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffjKeyFastGDAXOrderbookProductID, kn) {
						currentKey = ffjtFastGDAXOrderbookProductID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyFastGDAXOrderbookPrice, kn) {
						currentKey = ffjtFastGDAXOrderbookPrice
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffjKeyFastGDAXOrderbookRemainingSize, kn) {
						currentKey = ffjtFastGDAXOrderbookRemainingSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyFastGDAXOrderbookReason, kn) {
						currentKey = ffjtFastGDAXOrderbookReason
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffjKeyFastGDAXOrderbookSequence, kn) {
						currentKey = ffjtFastGDAXOrderbookSequence
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyFastGDAXOrderbookSide, kn) {
						currentKey = ffjtFastGDAXOrderbookSide
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeyFastGDAXOrderbookType, kn) {
						currentKey = ffjtFastGDAXOrderbookType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyFastGDAXOrderbookTime, kn) {
						currentKey = ffjtFastGDAXOrderbookTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyFastGDAXOrderbookReason, kn) {
					currentKey = ffjtFastGDAXOrderbookReason
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyFastGDAXOrderbookRemainingSize, kn) {
					currentKey = ffjtFastGDAXOrderbookRemainingSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyFastGDAXOrderbookFunds, kn) {
					currentKey = ffjtFastGDAXOrderbookFunds
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFastGDAXOrderbookOrderType, kn) {
					currentKey = ffjtFastGDAXOrderbookOrderType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyFastGDAXOrderbookSide, kn) {
					currentKey = ffjtFastGDAXOrderbookSide
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFastGDAXOrderbookPrice, kn) {
					currentKey = ffjtFastGDAXOrderbookPrice
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFastGDAXOrderbookOrderID, kn) {
					currentKey = ffjtFastGDAXOrderbookOrderID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyFastGDAXOrderbookSequence, kn) {
					currentKey = ffjtFastGDAXOrderbookSequence
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFastGDAXOrderbookProductID, kn) {
					currentKey = ffjtFastGDAXOrderbookProductID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFastGDAXOrderbookTime, kn) {
					currentKey = ffjtFastGDAXOrderbookTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFastGDAXOrderbookType, kn) {
					currentKey = ffjtFastGDAXOrderbookType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtFastGDAXOrderbooknosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtFastGDAXOrderbookType:
					goto handle_Type

				case ffjtFastGDAXOrderbookTime:
					goto handle_Time

				case ffjtFastGDAXOrderbookProductID:
					goto handle_ProductID

				case ffjtFastGDAXOrderbookSequence:
					goto handle_Sequence

				case ffjtFastGDAXOrderbookOrderID:
					goto handle_OrderID

				case ffjtFastGDAXOrderbookPrice:
					goto handle_Price

				case ffjtFastGDAXOrderbookSide:
					goto handle_Side

				case ffjtFastGDAXOrderbookOrderType:
					goto handle_OrderType

				case ffjtFastGDAXOrderbookFunds:
					goto handle_Funds

				case ffjtFastGDAXOrderbookRemainingSize:
					goto handle_RemainingSize

				case ffjtFastGDAXOrderbookReason:
					goto handle_Reason

				case ffjtFastGDAXOrderbooknosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Time:

	/* handler: j.Time type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Time = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProductID:

	/* handler: j.ProductID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ProductID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sequence:

	/* handler: j.Sequence type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Sequence = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderID:

	/* handler: j.OrderID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OrderID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Price:

	/* handler: j.Price type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Price = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Side:

	/* handler: j.Side type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Side = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderType:

	/* handler: j.OrderType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OrderType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Funds:

	/* handler: j.Funds type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Funds = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RemainingSize:

	/* handler: j.RemainingSize type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.RemainingSize = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Reason:

	/* handler: j.Reason type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Reason = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *SlowGDAXMatches) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *SlowGDAXMatches) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"type":`)
	fflib.WriteJsonString(buf, string(j.Type))
	buf.WriteString(`,"trade_id":`)
	fflib.FormatBits2(buf, uint64(j.TradeID), 10, false)
	buf.WriteString(`,"sequence":`)
	fflib.FormatBits2(buf, uint64(j.Sequence), 10, false)
	buf.WriteString(`,"time":`)
	fflib.WriteJsonString(buf, string(j.Time))
	buf.WriteString(`,"product_id":`)
	fflib.WriteJsonString(buf, string(j.ProductID))
	buf.WriteString(`,"price":`)
	fflib.WriteJsonString(buf, string(j.Price))
	buf.WriteString(`,"side":`)
	fflib.WriteJsonString(buf, string(j.Side))
	buf.WriteString(`,"size":`)
	fflib.WriteJsonString(buf, string(j.Size))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtSlowGDAXMatchesbase = iota
	ffjtSlowGDAXMatchesnosuchkey

	ffjtSlowGDAXMatchesType

	ffjtSlowGDAXMatchesTradeID

	ffjtSlowGDAXMatchesSequence

	ffjtSlowGDAXMatchesTime

	ffjtSlowGDAXMatchesProductID

	ffjtSlowGDAXMatchesPrice

	ffjtSlowGDAXMatchesSide

	ffjtSlowGDAXMatchesSize
)

var ffjKeySlowGDAXMatchesType = []byte("type")

var ffjKeySlowGDAXMatchesTradeID = []byte("trade_id")

var ffjKeySlowGDAXMatchesSequence = []byte("sequence")

var ffjKeySlowGDAXMatchesTime = []byte("time")

var ffjKeySlowGDAXMatchesProductID = []byte("product_id")

var ffjKeySlowGDAXMatchesPrice = []byte("price")

var ffjKeySlowGDAXMatchesSide = []byte("side")

var ffjKeySlowGDAXMatchesSize = []byte("size")

// UnmarshalJSON umarshall json - template of ffjson
func (j *SlowGDAXMatches) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *SlowGDAXMatches) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtSlowGDAXMatchesbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtSlowGDAXMatchesnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'p':

					if bytes.Equal(ffjKeySlowGDAXMatchesProductID, kn) {
						currentKey = ffjtSlowGDAXMatchesProductID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySlowGDAXMatchesPrice, kn) {
						currentKey = ffjtSlowGDAXMatchesPrice
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeySlowGDAXMatchesSequence, kn) {
						currentKey = ffjtSlowGDAXMatchesSequence
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySlowGDAXMatchesSide, kn) {
						currentKey = ffjtSlowGDAXMatchesSide
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySlowGDAXMatchesSize, kn) {
						currentKey = ffjtSlowGDAXMatchesSize
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeySlowGDAXMatchesType, kn) {
						currentKey = ffjtSlowGDAXMatchesType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySlowGDAXMatchesTradeID, kn) {
						currentKey = ffjtSlowGDAXMatchesTradeID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySlowGDAXMatchesTime, kn) {
						currentKey = ffjtSlowGDAXMatchesTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeySlowGDAXMatchesSize, kn) {
					currentKey = ffjtSlowGDAXMatchesSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySlowGDAXMatchesSide, kn) {
					currentKey = ffjtSlowGDAXMatchesSide
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySlowGDAXMatchesPrice, kn) {
					currentKey = ffjtSlowGDAXMatchesPrice
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeySlowGDAXMatchesProductID, kn) {
					currentKey = ffjtSlowGDAXMatchesProductID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySlowGDAXMatchesTime, kn) {
					currentKey = ffjtSlowGDAXMatchesTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySlowGDAXMatchesSequence, kn) {
					currentKey = ffjtSlowGDAXMatchesSequence
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeySlowGDAXMatchesTradeID, kn) {
					currentKey = ffjtSlowGDAXMatchesTradeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySlowGDAXMatchesType, kn) {
					currentKey = ffjtSlowGDAXMatchesType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtSlowGDAXMatchesnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtSlowGDAXMatchesType:
					goto handle_Type

				case ffjtSlowGDAXMatchesTradeID:
					goto handle_TradeID

				case ffjtSlowGDAXMatchesSequence:
					goto handle_Sequence

				case ffjtSlowGDAXMatchesTime:
					goto handle_Time

				case ffjtSlowGDAXMatchesProductID:
					goto handle_ProductID

				case ffjtSlowGDAXMatchesPrice:
					goto handle_Price

				case ffjtSlowGDAXMatchesSide:
					goto handle_Side

				case ffjtSlowGDAXMatchesSize:
					goto handle_Size

				case ffjtSlowGDAXMatchesnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TradeID:

	/* handler: j.TradeID type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.TradeID = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sequence:

	/* handler: j.Sequence type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Sequence = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Time:

	/* handler: j.Time type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Time = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProductID:

	/* handler: j.ProductID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ProductID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Price:

	/* handler: j.Price type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Price = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Side:

	/* handler: j.Side type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Side = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Size:

	/* handler: j.Size type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Size = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *SlowGDAXOrderbookUpdates) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *SlowGDAXOrderbookUpdates) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"type":`)
	fflib.WriteJsonString(buf, string(j.Type))
	buf.WriteString(`,"product_id":`)
	fflib.WriteJsonString(buf, string(j.ProductID))
	buf.WriteString(`,"changes":`)
	if j.Changes != nil {
		buf.WriteString(`[`)
		for i, v := range j.Changes {
			if i != 0 {
				buf.WriteString(`,`)
			}
			if v != nil {
				buf.WriteString(`[`)
				for i, v := range v {
					if i != 0 {
						buf.WriteString(`,`)
					}
					fflib.WriteJsonString(buf, string(v))
				}
				buf.WriteString(`]`)
			} else {
				buf.WriteString(`null`)
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtSlowGDAXOrderbookUpdatesbase = iota
	ffjtSlowGDAXOrderbookUpdatesnosuchkey

	ffjtSlowGDAXOrderbookUpdatesType

	ffjtSlowGDAXOrderbookUpdatesProductID

	ffjtSlowGDAXOrderbookUpdatesChanges
)

var ffjKeySlowGDAXOrderbookUpdatesType = []byte("type")

var ffjKeySlowGDAXOrderbookUpdatesProductID = []byte("product_id")

var ffjKeySlowGDAXOrderbookUpdatesChanges = []byte("changes")

// UnmarshalJSON umarshall json - template of ffjson
func (j *SlowGDAXOrderbookUpdates) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *SlowGDAXOrderbookUpdates) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtSlowGDAXOrderbookUpdatesbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtSlowGDAXOrderbookUpdatesnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeySlowGDAXOrderbookUpdatesChanges, kn) {
						currentKey = ffjtSlowGDAXOrderbookUpdatesChanges
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeySlowGDAXOrderbookUpdatesProductID, kn) {
						currentKey = ffjtSlowGDAXOrderbookUpdatesProductID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeySlowGDAXOrderbookUpdatesType, kn) {
						currentKey = ffjtSlowGDAXOrderbookUpdatesType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeySlowGDAXOrderbookUpdatesChanges, kn) {
					currentKey = ffjtSlowGDAXOrderbookUpdatesChanges
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeySlowGDAXOrderbookUpdatesProductID, kn) {
					currentKey = ffjtSlowGDAXOrderbookUpdatesProductID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySlowGDAXOrderbookUpdatesType, kn) {
					currentKey = ffjtSlowGDAXOrderbookUpdatesType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtSlowGDAXOrderbookUpdatesnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtSlowGDAXOrderbookUpdatesType:
					goto handle_Type

				case ffjtSlowGDAXOrderbookUpdatesProductID:
					goto handle_ProductID

				case ffjtSlowGDAXOrderbookUpdatesChanges:
					goto handle_Changes

				case ffjtSlowGDAXOrderbookUpdatesnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProductID:

	/* handler: j.ProductID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ProductID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Changes:

	/* handler: j.Changes type=[][]string kind=slice quoted=false*/

	{
		/* Falling back. type=[][]string kind=slice */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Changes)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
